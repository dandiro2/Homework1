function [N,dNdxi]=Shapefunction(ncoord,nelnodes,xi,n);
%UNTITLED5 Summary of this function goes here
%   Detailed explanation goes here
   N = zeros(nelnodes,1);
%
%  1D elements
%
  if (ncoord == 1) 
    if (nelnodes==2) 
      N(1,i1) = 0.5*(1.+xi(1,i1));
      N(2,i1) = 0.5*(1.-xi(1,i1));
    elseif (nelnodes == 3) 
      N(1,i1) = -0.5*xi(1,i1)*(1.-xi(1,i1));
      N(2,i1) =  0.5*xi(1,i1)*(1.+xi(1,i1));
      N(3,i1) = (1.-xi(1,i1))*(1.+xi(1,i1));
    end
%
%  2D elements
%
   elseif (ncoord == 2) 
%
%    Triangular element
%
     if ( nelnodes == 3 ) 
       for i1=1:n    
       N(1,i1) = xi(1,i1);
       N(2,i1) = xi(2,i1);
       N(3,i1) = 1.-xi(1,i1)-xi(2,i1); 
       end
     elseif ( nelnodes == 6 ) 
       for i1=1:n 
       xi3 = 1.-xi(1,i1)-xi(2,i1);
       N(1,i1) = (2.*xi(1,i1)-1.)*xi(1,i1);
       N(2,i1) = (2.*xi(2,i1)-1.)*xi(2,i1);
       N(3,i1) = (2.*xi3-1.)*xi3;
       N(4,i1) = 4.*xi(1,i1)*xi(2,i1);
       N(5,i1) = 4.*xi(2,i1)*xi3;
       N(6,i1) = 4.*xi3*xi(1,i1);
       end
%    Rectangular element
%                  
     elseif ( nelnodes == 4 ) 
       for i1=1:n 
       N(1,i1) = 0.25*(1.-xi(1,i1))*(1.-xi(2,i1));
       N(2,i1) = 0.25*(1.+xi(1,i1))*(1.-xi(2,i1));
       N(3,i1) = 0.25*(1.+xi(1,i1))*(1.+xi(2,i1));
       N(4,i1) = 0.25*(1.-xi(1,i1))*(1.+xi(2,i1));
       end
     elseif (nelnodes == 8) 
       for i1=1:n   
       N(1,i1) = -0.25*(1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(1,i1)+xi(2,i1));
       N(2,i1) = 0.25*(1.+xi(1,i1))*(1.-xi(2,i1))*(xi(1,i1)-xi(2,i1)-1.);
       N(3,i1) = 0.25*(1.+xi(1,i1))*(1.+xi(2,i1))*(xi(1,i1)+xi(2,i1)-1.);
       N(4,i1) = 0.25*(1.-xi(1,i1))*(1.+xi(2,i1))*(xi(2,i1)-xi(1,i1)-1.);
       N(5,i1) = 0.5*(1.-xi(1,i1)*xi(1,i1))*(1.-xi(2,i1));
       N(6,i1) = 0.5*(1.+xi(1,i1))*(1.-xi(2,i1)*xi(2,i1));
       N(7,i1) = 0.5*(1.-xi(1,i1)*xi(1,i1))*(1.+xi(2,i1));
       N(8,i1) = 0.5*(1.-xi(1,i1))*(1.-xi(2,i1)*xi(2,i1));
       end
     end
%
   elseif (ncoord==3) 

     if (nelnodes == 4) 
       for i1=1:n 
       N(1,i1) = xi(1,i1);
       N(2,i1) = xi(2,i1);
       N(3,i1) = xi(3,i1);
       N(4,i1) = 1.-xi(1,i1)-xi(2,i1)-xi(3,i1);
       end
     elseif (nelnodes == 10) 
       for i1=1:n 
       xi4 = 1.-xi(1,i1)-xi(2,i1)-xi(3,i1);
       N(1,i1) = (2.*xi(1,i1)-1.)*xi(1,i1);
       N(2,i1) = (2.*xi(2,i1)-1.)*xi(2,i1);
       N(3,i1) = (2.*xi(3,i1)-1.)*xi(3,i1);
       N(4,i1) = (2.*xi4-1.)*xi4;
       N(5,i1) = 4.*xi(1,i1)*xi(2,i1);
       N(6,i1) = 4.*xi(2,i1)*xi(3,i1);
       N(7,i1) = 4.*xi(3,i1)*xi(1,i1);
       N(8,i1) = 4.*xi(1,i1)*xi4;
       N(9,i1) = 4.*xi(2,i1)*xi4;
       N(10,i1) = 4.*xi(3,i1)*xi4;
       end
     elseif (nelnodes == 8) 
       for i1=1:n 
       N(1,i1) = (1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1))/8.;
       N(2,i1) = (1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1))/8.;
       N(3,i1) = (1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1))/8.;
       N(4,i1) = (1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1))/8.;
       N(5,i1) = (1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1))/8.;
       N(6,i1) = (1.+xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1))/8.;
       N(7,i1) = (1.+xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1))/8.;
       N(8,i1) = (1.-xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1))/8.;
       end
     elseif (nelnodes == 20) 
       for i1=1:n 
       N(1,i1) = (1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1))*(-xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)/8.;
       N(2,i1) = (1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1))*(xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)/8.;
       N(3,i1) = (1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1))*(xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)/8.;
       N(4,i1) = (1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1))*(-xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)/8.;
       N(5,i1) = (1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1))*(-xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)/8.;
       N(6,i1) = (1.+xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1))*(xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)/8.;
       N(7,i1) = (1.+xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1))*(xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)/8.;
       N(8,i1) = (1.-xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1))*(-xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)/8.;
       N(9,i1)  = (1.-xi(1,i1)^2)*(1.-xi(2,i1))*(1.-xi(3,i1))/4.;
       N(10,i1) = (1.+xi(1,i1))*(1.-xi(2,i1)^2)*(1.-xi(3,i1))/4.;
       N(11,i1) = (1.-xi(1,i1)^2)*(1.+xi(2,i1))*(1.-xi(3,i1))/4.;
       N(12,i1) = (1.-xi(1,i1))*(1.-xi(2,i1)^2)*(1.-xi(3,i1))/4.;
       N(13,i1) = (1.-xi(1,i1)^2)*(1.-xi(2,i1))*(1.+xi(3,i1))/4.;
       N(14,i1) = (1.+xi(1,i1))*(1.-xi(2,i1)^2)*(1.+xi(3,i1))/4.;
       N(15,i1) = (1.-xi(1,i1)^2)*(1.+xi(2,i1))*(1.+xi(3,i1))/4.;
       N(16,i1) = (1.-xi(1,i1))*(1.-xi(2,i1)^2)*(1.+xi(3,i1))/4.;
       N(17,i1) = (1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       N(18,i1) = (1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       N(19,i1) = (1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       N(20,i1) = (1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       end
       end
   end


%
%================= SHAPE FUNCTION DERIVATIVES ======================

  dNdxi = zeros(nelnodes,ncoord*n);
%
% 1D elements

  if (ncoord == 1) 
    if (nelnodes==2) 
      dNdxi(1,1) = 0.5;
      dNdxi(2,1) = -0.5;
    elseif (nelnodes == 3) 
      dNdxi(1,1) = -0.5+xi(1,i1);
      dNdxi(2,1) =  0.5+xi(1,i1);
      dNdxi(3,1) = -2.*xi(1,i1);
    end
% 
%  2D elements
%
   elseif (ncoord == 2) 
%
%    Triangular element
%
     if ( nelnodes == 3 ) 
       for i1=1:n
       dNdxi(1,i1*2-1) = 1.;
       dNdxi(2,i1*2) = 1.;
       dNdxi(3,i1*2-1) = -1.;
       dNdxi(3,i1*2) = -1.;  
       end
     elseif ( nelnodes == 6 ) 
       for i1=1:n
       xi3 = 1.-xi(1,i1)-xi(2,i1);
       dNdxi(1,i1*2-1) = 4.*xi(1,i1)-1.;
       dNdxi(2,i1*2) = 4.*xi(2,i1)-1.;
       dNdxi(3,i1*2-1) = -(4.*xi3-1.);
       dNdxi(3,i1*2) = -(4.*xi3-1.);
       dNdxi(4,i1*2-1) = 4.*xi(2,i1);
       dNdxi(4,i1*2) = 4.*xi(1,i1);
       dNdxi(5,i1*2-1) = -4.*xi(2,i1);
       dNdxi(5,i1*2) = 4.*xi3 - 4.*xi(2,i1);
       dNdxi(6,i1*2-1) = 4.*xi3 - 4.*xi(1,i1);
       dNdxi(6,i1*2) = -4.*xi(1,i1);
       end
%
%    Rectangular element
%                  
     elseif ( nelnodes == 4 ) 
       for i1=1:n
       dNdxi(1,i1*2-1) = -0.25*(1.-xi(2,i1));
       dNdxi(1,i1*2) = -0.25*(1.-xi(1,i1));
       dNdxi(2,i1*2-1) = 0.25*(1.-xi(2,i1));
       dNdxi(2,i1*2) = -0.25*(1.+xi(1,i1));
       dNdxi(3,i1*2-1) = 0.25*(1.+xi(2,i1));
       dNdxi(3,i1*2) = 0.25*(1.+xi(1,i1));
       dNdxi(4,i1*2-1) = -0.25*(1.+xi(2,i1));
       dNdxi(4,i1*2) = 0.25*(1.-xi(1,i1));
       end
     elseif (nelnodes == 8) 
       for i1=1:n
       dNdxi(1,i1*2-1) = 0.25*(1.-xi(2,i1))*(2.*xi(1,i1)+xi(2,i1));
       dNdxi(1,i1*2) = 0.25*(1.-xi(1,i1))*(xi(1,i1)+2.*xi(2,i1));
       dNdxi(2,i1*2-1) = 0.25*(1.-xi(2,i1))*(2.*xi(1,i1)-xi(2,i1));
       dNdxi(2,i1*2) = 0.25*(1.+xi(1,i1))*(2.*xi(2,i1)-xi(1,i1));
       dNdxi(3,i1*2-1) = 0.25*(1.+xi(2,i1))*(2.*xi(1,i1)+xi(2,i1));
       dNdxi(3,i1*2) = 0.25*(1.+xi(1,i1))*(2.*xi(2,i1)+xi(1,i1));
       dNdxi(4,i1*2-1) = 0.25*(1.+xi(2,i1))*(2.*xi(1,i1)-xi(2,i1));
       dNdxi(4,i1*2) = 0.25*(1.-xi(1,i1))*(2.*xi(2,i1)-xi(1,i1));
       dNdxi(5,i1*2-1) = -xi(1,i1)*(1.-xi(2,i1));
       dNdxi(5,i1*2) = -0.5*(1.-xi(1,i1)*xi(1,i1));
       dNdxi(6,i1*2-1) = 0.5*(1.-xi(2,i1)*xi(2,i1));
       dNdxi(6,i1*2) = -(1.+xi(1,i1))*xi(2,i1);
       dNdxi(7,i1*2-1) = -xi(1,i1)*(1.+xi(2,i1));
       dNdxi(7,i1*2) = 0.5*(1.-xi(1,i1)*xi(1,i1));
       dNdxi(8,i1*2-1) = -0.5*(1.-xi(2,i1)*xi(2,i1));
       dNdxi(8,i1*2) = -(1.-xi(1,i1))*xi(2,i1);
       end
      end
%
%    3D elements
% 

   elseif (ncoord==3) 

     if (nelnodes == 4) 
       for i1=1:n
       dNdxi(1,i1*2-1) = 1.;
       dNdxi(2,i1*2) = 1.;
       dNdxi(3,i1*2+1) = 1.;
       dNdxi(4,i1*2-1) = -1.;
       dNdxi(4,i1*2) = -1.;
       dNdxi(4,i1*2+1) = -1.;
       end
     elseif (nelnodes == 10) 
       for i1=1:n
       xi4 = 1.-xi(1,i1)-xi(2,i1)-xi(3,i1);
       dNdxi(1,i1*3-2) = (4.*xi(1,i1)-1.);
       dNdxi(2,i1*3-1) = (4.*xi(2,i1)-1.);
       dNdxi(3,i1*3) = (4.*xi(3,i1)-1.);
       dNdxi(4,i1*3-2) = -(4.*xi4-1.);
       dNdxi(4,i1*3-1) = -(4.*xi4-1.);
       dNdxi(4,i1*3) = -(4.*xi4-1.);
       dNdxi(5,i1*3-2) = 4.*xi(2,i1);
       dNdxi(5,i1*3-1) = 4.*xi(1,i1);
       dNdxi(6,i1*3-1) = 4.*xi(3,i1);
       dNdxi(6,i1*3) = 4.*xi(2,i1);
       dNdxi(7,i1*3-2) = 4.*xi(3,i1);
       dNdxi(7,i1*3) = 4.*xi(1,i1); 
       dNdxi(8,i1*3-2) = 4.*(xi4-xi(1,i1)); 
       dNdxi(8,i1*3-1) = -4.*xi(1,i1);
       dNdxi(8,i1*3) = -4.*xi(1,i1);
       dNdxi(9,i1*3-2) = -4.*xi(2,i1);
       dNdxi(9,i1*3-1) = 4*(1-xi(1,i1)-2.*xi(2,i1)-xi(3,i1));
       dNdxi(9,i1*3) = -4.*xi(2,i1);
       dNdxi(10,i1*3-2) = -4.*xi(3,i1);
       dNdxi(10,i1*3-1) = -4.*xi(3,i1);
       dNdxi(10,i1*3) = 4.*(xi4-xi(3,i1));
       end
     elseif (nelnodes == 8) 
       for i1=1:n
       dNdxi(1,i1*3-2) = -(1.-xi(2,i1))*(1.-xi(3,i1))/8.;
       dNdxi(1,i1*3-1) = -(1.-xi(1,i1))*(1.-xi(3,i1))/8.;
       dNdxi(1,i1*3) = -(1.-xi(1,i1))*(1.-xi(2,i1))/8.;
       dNdxi(2,i1*3-2) = (1.-xi(2,i1))*(1.-xi(3,i1))/8.;
       dNdxi(2,i1*3-1) = -(1.+xi(1,i1))*(1.-xi(3,i1))/8.;
       dNdxi(2,i1*3) = -(1.+xi(1,i1))*(1.-xi(2,i1))/8.;
       dNdxi(3,i1*3-2) = (1.+xi(2,i1))*(1.-xi(3,i1))/8.;
       dNdxi(3,i1*3-1) = (1.+xi(1,i1))*(1.-xi(3,i1))/8.;
       dNdxi(3,i1*3) = -(1.+xi(1,i1))*(1.+xi(2,i1))/8.;
       dNdxi(4,i1*3-2) = -(1.+xi(2,i1))*(1.-xi(3,i1))/8.;
       dNdxi(4,i1*3-1) = (1.-xi(1,i1))*(1.-xi(3,i1))/8.;
       dNdxi(4,i1*3) = -(1.-xi(1,i1))*(1.+xi(2,i1))/8.;
       dNdxi(5,i1*3-2) = -(1.-xi(2,i1))*(1.+xi(3,i1))/8.;
       dNdxi(5,i1*3-1) = -(1.-xi(1,i1))*(1.+xi(3,i1))/8.;
       dNdxi(5,i1*3) = (1.-xi(1,i1))*(1.-xi(2,i1))/8.;
       dNdxi(6,i1*3-2) = (1.-xi(2,i1))*(1.+xi(3,i1))/8.;
       dNdxi(6,i1*3-1) = -(1.+xi(1,i1))*(1.+xi(3,i1))/8.;
       dNdxi(6,i1*3) = (1.+xi(1,i1))*(1.-xi(2,i1))/8.;
       dNdxi(7,i1*3-2) = (1.+xi(2,i1))*(1.+xi(3,i1))/8.;
       dNdxi(7,i1*3-1) = (1.+xi(1,i1))*(1.+xi(3,i1))/8.;
       dNdxi(7,i1*3) = (1.+xi(1,i1))*(1.+xi(2,i1))/8.;
       dNdxi(8,i1*3-2) = -(1.+xi(2,i1))*(1.+xi(3,i1))/8.;
       dNdxi(8,i1*3-1) = (1.-xi(1,i1))*(1.+xi(3,i1))/8.;
       dNdxi(8,i1*3) = (1.-xi(1,i1))*(1.+xi(2,i1))/8.;
       end
     elseif (nelnodes == 20) 
       for i1=1:n
       dNdxi(1,i1*3-2) = (-(1.-xi(2,i1))*(1.-xi(3,i1))*(-xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)-(1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(1,i1*3-1) = (-(1.-xi(1,i1))*(1.-xi(3,i1))*(-xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)-(1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(1,i1*3) = (-(1.-xi(1,i1))*(1.-xi(2,i1))*(-xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)-(1.-xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;

       dNdxi(2,i1*3-2) = ((1.-xi(2,i1))*(1.-xi(3,i1))*(xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)+(1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(2,i1*3-1) = (-(1.+xi(1,i1))*(1.-xi(3,i1))*(xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)-(1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(2,i1*3) = (-(1.+xi(1,i1))*(1.-xi(2,i1))*(xi(1,i1)-xi(2,i1)-xi(3,i1)-2.)-(1.+xi(1,i1))*(1.-xi(2,i1))*(1.-xi(3,i1)))/8.;

       dNdxi(3,i1*3-2) = ((1.+xi(2,i1))*(1.-xi(3,i1))*(xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)+(1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(3,i1*3-1) = ((1.+xi(1,i1))*(1.-xi(3,i1))*(xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)+(1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(3,i1*3) = (-(1.+xi(1,i1))*(1.+xi(2,i1))*(xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)-(1.+xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;

       dNdxi(4,i1*3-2) = (-(1.+xi(2,i1))*(1.-xi(3,i1))*(-xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)-(1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(4,i1*3-1) = ((1.-xi(1,i1))*(1.-xi(3,i1))*(-xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)+(1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(4,i1*3) = (-(1.-xi(1,i1))*(1.+xi(2,i1))*(-xi(1,i1)+xi(2,i1)-xi(3,i1)-2.)-(1.-xi(1,i1))*(1.+xi(2,i1))*(1.-xi(3,i1)))/8.;
       dNdxi(5,i1*3-2) = (-(1.-xi(2,i1))*(1.+xi(3,i1))*(-xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)-(1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(5,i1*3-1) = (-(1.-xi(1,i1))*(1.+xi(3,i1))*(-xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)-(1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(5,i1*3) = ((1.-xi(1,i1))*(1.-xi(2,i1))*(-xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)+(1.-xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(6,i1*3-2) = ((1.-xi(2,i1))*(1.+xi(3,i1))*(xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)+(1.+xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(6,i1*3-1) = (-(1.+xi(1,i1))*(1.+xi(3,i1))*(xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)-(1.+xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(6,i1*3) = ((1.+xi(1,i1))*(1.-xi(2,i1))*(xi(1,i1)-xi(2,i1)+xi(3,i1)-2.)+(1.+xi(1,i1))*(1.-xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(7,i1*3-2) = ((1.+xi(2,i1))*(1.+xi(3,i1))*(xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)+(1.+xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(7,i1*3-1) = ((1.+xi(1,i1))*(1.+xi(3,i1))*(xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)+(1.+xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(7,i1*3) = ((1.+xi(1,i1))*(1.+xi(2,i1))*(xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)+(1.+xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(8,i1*3-2) = (-(1.+xi(2,i1))*(1.+xi(3,i1))*(-xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)-(1.-xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(8,i1*3-1) = ((1.-xi(1,i1))*(1.+xi(3,i1))*(-xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)+(1.-xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(8,i1*3) = ((1.-xi(1,i1))*(1.+xi(2,i1))*(-xi(1,i1)+xi(2,i1)+xi(3,i1)-2.)+(1.-xi(1,i1))*(1.+xi(2,i1))*(1.+xi(3,i1)))/8.;
       dNdxi(9,i1*3-2)  = -2.*xi(1,i1)*(1.-xi(2,i1))*(1.-xi(3,i1))/4.;
       dNdxi(9,i1*3-1)  = -(1.-xi(1,i1)^2)*(1.-xi(3,i1))/4.;
       dNdxi(9,i1*3)  = -(1.-xi(1,i1)^2)*(1.-xi(2,i1))/4.;
       dNdxi(10,i1*3-2)  = (1.-xi(2,i1)^2)*(1.-xi(3,i1))/4.;
       dNdxi(10,i1*3-1)  = -2.*xi(2,i1)*(1.+xi(1,i1))*(1.-xi(3,i1))/4.;
       dNdxi(10,i1*3)  = -(1.-xi(2,i1)^2)*(1.+xi(1,i1))/4.;
       dNdxi(11,i1*3-2)  = -2.*xi(1,i1)*(1.+xi(2,i1))*(1.-xi(3,i1))/4.;
       dNdxi(11,i1*3-1)  = (1.-xi(1,i1)^2)*(1.-xi(3,i1))/4.;
       dNdxi(11,i1*3)  = -(1.-xi(1,i1)^2)*(1.+xi(2,i1))/4.;
       dNdxi(12,i1*3-2)  = -(1.-xi(2,i1)^2)*(1.-xi(3,i1))/4.;
       dNdxi(12,i1*3-1)  = -2.*xi(2,i1)*(1.-xi(1,i1))*(1.-xi(3,i1))/4.;
       dNdxi(12,i1*3)  = -(1.-xi(2,i1)^2)*(1.-xi(1,i1))/4.;
       dNdxi(13,i1*3-2)  = -2.*xi(1,i1)*(1.-xi(2,i1))*(1.+xi(3,i1))/4.;
       dNdxi(13,i1*3-1)  = -(1.-xi(1,i1)^2)*(1.+xi(3,i1))/4.;
       dNdxi(13,i1*3)  = (1.-xi(1,i1)^2)*(1.-xi(2,i1))/4.;
       dNdxi(14,i1*3-2)  = (1.-xi(2,i1)^2)*(1.+xi(3,i1))/4.;
       dNdxi(14,i1*3-1)  = -2.*xi(2,i1)*(1.+xi(1,i1))*(1.+xi(3,i1))/4.;
       dNdxi(14,i1*3)  = (1.-xi(2,i1)^2)*(1.+xi(1,i1))/4.;
       dNdxi(15,i1*3-2)  = -2.*xi(1,i1)*(1.+xi(2,i1))*(1.+xi(3,i1))/4.;
       dNdxi(15,i1*3-1)  =  (1.-xi(1,i1)^2)*(1.+xi(3,i1))/4.;
       dNdxi(15,i1*3)  = (1.-xi(1,i1)^2)*(1.+xi(2,i1))/4.;
       dNdxi(16,i1*3-2)  = -(1.-xi(2,i1)^2)*(1.+xi(3,i1))/4.;
       dNdxi(16,i1*3-1)  = -2.*xi(2,i1)*(1.-xi(1,i1))*(1.+xi(3,i1))/4.;
       dNdxi(16,i1*3)  = (1.-xi(2,i1)^2)*(1.-xi(1,i1))/4.;
       dNdxi(17,i1*3-2) = -(1.-xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(17,i1*3-1) = -(1.-xi(1,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(17,i1*3) = -xi(3,i1)*(1.-xi(1,i1))*(1.-xi(2,i1))/2.;
       dNdxi(18,i1*3-2) = (1.-xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(18,i1*3-1) = -(1.+xi(1,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(18,i1*3) = -xi(3,i1)*(1.+xi(1,i1))*(1.-xi(2,i1))/2.;
       dNdxi(19,i1*3-2) = (1.+xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(19,i1*3-1) = (1.+xi(1,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(19,i1*3) = -xi(3,i1)*(1.+xi(1,i1))*(1.+xi(2,i1))/2.;
       dNdxi(20,i1*3-2) = -(1.+xi(2,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(20,i1*3-1) = (1.-xi(1,i1))*(1.-xi(3,i1)^2)/4.;
       dNdxi(20,i1*3) = -xi(3,i1)*(1.-xi(1,i1))*(1.+xi(2,i1))/2.;
       end
     end
   end



end

